{"changed":true,"filter":false,"title":"Search Results","tooltip":"/.c9/searchresults","value":"Searching for \u0001isValid\u0001 in\u0001all favorite folders\u0001 (Found 4 matches in 3 files)\n\n/src/data/automata.js:\n\t52:         automata.prototype.isValid = function()\n\t56:                 return !state.isValid(this.hasLookAhead);\n\n/src/data/state.js:\n\t211:         state.prototype.isValid = function(considerLookAhead) {\n\n/src/parser/automataLRGeneratorBase.js:\n\t93: \t\t\tif (!options.notValidate && !automata.isValid())\n\nFound 4 matches in 3 files \n\n","undoManager":{"mark":-1,"position":25,"stack":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":" "},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":56}},"text":"Searching for \u0001AcceptanceState\u0001 in\u0001all favorite folders\u0001"},{"action":"insertText","range":{"start":{"row":0,"column":56},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":19}},"text":"/src/data/state.js:"},{"action":"insertText","range":{"start":{"row":2,"column":19},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":112}},"text":"\t25:             k.utils.obj.defineProperty(this, 'isAcceptanceState'); // This is set by the automata generator"},{"action":"insertText","range":{"start":{"row":3,"column":112},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":8,"column":0}},"lines":["\t32:             this.isAcceptanceState = false;","\t116:                 return 'AcceptanceState';","","/src/parser/automataLALR1Generator.js:"]},{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":38}},"text":"\t110: \t\t\t\tif (state.isAcceptanceState)"},{"action":"insertText","range":{"start":{"row":8,"column":38},"end":{"row":9,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":9,"column":0},"end":{"row":13,"column":0}},"lines":["","/src/parser/automataLR0Generator.js:","\t73: \t\t\t\t\tif (state.isAcceptanceState) {",""]},{"action":"insertText","range":{"start":{"row":13,"column":0},"end":{"row":13,"column":39}},"text":"/src/parser/automataLRGeneratorBase.js:"},{"action":"insertText","range":{"start":{"row":13,"column":39},"end":{"row":14,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":14,"column":0},"end":{"row":16,"column":0}},"lines":["\t137: \t\t\t\t\taddedState.isAcceptanceState = !!(addedState.getOriginalItems().length === 1 && addedState.getOriginalItems()[0].rule.name === k.data.Grammar.constants.AugmentedRuleName && addedState.getOriginalItems()[0].dotLocation === 2);",""]},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":27}},"text":"Found 6 matches in 4 files "},{"action":"insertText","range":{"start":{"row":16,"column":27},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":18,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":56},"end":{"row":0,"column":85}},"text":" (Found 6 matches in 4 files)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":21}},"text":"/src/data/astNode.js:"},{"action":"insertText","range":{"start":{"row":2,"column":21},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":18}},"text":"\t7:     /* ASTNode"},{"action":"insertText","range":{"start":{"row":3,"column":18},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":12,"column":0}},"lines":["\t10:     var ASTNode = (function(_super)","\t13:         k.utils.obj.inherit(astNode, _super);","\t25:         function astNode (options) {","\t37:         astNode.prototype.toString = function(options)","\t55:         astNode.prototype._toCurrentString = function ()","\t60:         return astNode;","\t64:         ASTNode: ASTNode",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":22}},"text":"/src/parser/parser.js:"},{"action":"insertText","range":{"start":{"row":12,"column":22},"end":{"row":13,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":13,"column":0},"end":{"row":23,"column":0}},"lines":["\t1: define(['../utils/obj', '../data/stackItem', '../data/astNode', '../lexer/lexer', './automataLR0Generator'],  function (k)","\t51: \t\t* @returns {ASTNode|false} The generated AST in case of sucess or false otherwise */","\t66: \t\t* @returns {ASTNode|false} The generated AST in case of success or false otherwise */","\t127: \t\t\t\tnewASTNode,","\t128: \t\t\t\tsubASTNodes,","\t156: \t\t\t\tsubASTNodes = k.utils.obj.map(stackRange, function (stackItem)","\t162: \t\t\t\tnewASTNode = new k.data.ASTNode({","\t163: \t\t\t\t\tnodes: subASTNodes,","\t168: \t\t\t\tlastItem.AST = newASTNode;",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":28}},"text":"Found 19 matches in 2 files "},{"action":"insertText","range":{"start":{"row":23,"column":28},"end":{"row":24,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":25,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":46},"end":{"row":0,"column":76}},"text":" (Found 19 matches in 2 files)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":25,"column":0}},"nl":"\n","lines":["Searching for \u0001astNode\u0001 in\u0001the entire project\u0001 (Found 19 matches in 2 files)","","/src/data/astNode.js:","\t7:     /* ASTNode","\t10:     var ASTNode = (function(_super)","\t13:         k.utils.obj.inherit(astNode, _super);","\t25:         function astNode (options) {","\t37:         astNode.prototype.toString = function(options)","\t55:         astNode.prototype._toCurrentString = function ()","\t60:         return astNode;","\t64:         ASTNode: ASTNode","","/src/parser/parser.js:","\t1: define(['../utils/obj', '../data/stackItem', '../data/astNode', '../lexer/lexer', './automataLR0Generator'],  function (k)","\t51: \t\t* @returns {ASTNode|false} The generated AST in case of sucess or false otherwise */","\t66: \t\t* @returns {ASTNode|false} The generated AST in case of success or false otherwise */","\t127: \t\t\t\tnewASTNode,","\t128: \t\t\t\tsubASTNodes,","\t156: \t\t\t\tsubASTNodes = k.utils.obj.map(stackRange, function (stackItem)","\t162: \t\t\t\tnewASTNode = new k.data.ASTNode({","\t163: \t\t\t\t\tnodes: subASTNodes,","\t168: \t\t\t\tlastItem.AST = newASTNode;","","Found 19 matches in 2 files ",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":" "},{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":" "},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":45}},"text":"Searching for \u0001TODO\u0001 in\u0001all favorite folders\u0001"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":22}},"text":"/src/data/itemRule.js:"},{"action":"insertText","range":{"start":{"row":2,"column":22},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":25}},"text":"\t109: \t\t\t//TODO TEST THIS"},{"action":"insertText","range":{"start":{"row":3,"column":25},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":12,"column":0}},"lines":["\t146: \t\t\t//TODO TEST look ahead parameter!","","/src/data/state.js:","\t70:                 //TODO Think a way to only do this when the automata begin generated is LR(k>=1), It should be a general way to pass more options to this method","","/src/lexer/lexer.js:","\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!",""]},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":38}},"text":"/src/parser/automataLALR1Generator.js:"},{"action":"insertText","range":{"start":{"row":12,"column":38},"end":{"row":13,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":13,"column":0},"end":{"row":15,"column":0}},"lines":["\t39: \t\t\t//TODO TEST THIS",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":22}},"text":"/src/parser/parser.js:"},{"action":"insertText","range":{"start":{"row":15,"column":22},"end":{"row":16,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":16,"column":0},"end":{"row":34,"column":0}},"lines":["\t53: \t\t\t//TODO TEST THIS!!!","\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS",""]},{"action":"insertText","range":{"start":{"row":34,"column":0},"end":{"row":34,"column":18}},"text":"/src/utils/str.js:"},{"action":"insertText","range":{"start":{"row":34,"column":18},"end":{"row":35,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":35,"column":0},"end":{"row":37,"column":0}},"lines":["\t71: \t\t\t//TODO TESET THIS",""]},{"action":"insertText","range":{"start":{"row":37,"column":0},"end":{"row":37,"column":28}},"text":"Found 23 matches in 6 files "},{"action":"insertText","range":{"start":{"row":37,"column":28},"end":{"row":38,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":38,"column":0},"end":{"row":39,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":0,"column":75}},"text":" (Found 23 matches in 6 files)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":9}},"text":"Searching"},{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":39,"column":0}},"nl":"\n","lines":["","/src/data/itemRule.js:","\t109: \t\t\t//TODO TEST THIS","\t146: \t\t\t//TODO TEST look ahead parameter!","","/src/data/state.js:","\t70:                 //TODO Think a way to only do this when the automata begin generated is LR(k>=1), It should be a general way to pass more options to this method","","/src/lexer/lexer.js:","\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!","","/src/parser/automataLALR1Generator.js:","\t39: \t\t\t//TODO TEST THIS","","/src/parser/parser.js:","\t53: \t\t\t//TODO TEST THIS!!!","\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS","","/src/utils/str.js:","\t71: \t\t\t//TODO TESET THIS","","Found 23 matches in 6 files ",""]},{"action":"removeText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":66}},"text":"for \u0001TODO\u0001 in\u0001all favorite folders\u0001 (Found 23 matches in 6 files)"},{"action":"removeText","range":{"start":{"row":0,"column":1},"end":{"row":1,"column":0}},"text":"\n"},{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":" "},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":45}},"text":"Searching for \u0001TODO\u0001 in\u0001all favorite folders\u0001"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":22}},"text":"/src/data/itemRule.js:"},{"action":"insertText","range":{"start":{"row":2,"column":22},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":25}},"text":"\t109: \t\t\t//TODO TEST THIS"},{"action":"insertText","range":{"start":{"row":3,"column":25},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":9,"column":0}},"lines":["\t146: \t\t\t//TODO TEST look ahead parameter!","","/src/data/state.js:","\t70:                 //TODO Think a way to only do this when the automata begin generated is LR(k>=1), It should be a general way to pass more options to this method",""]},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":20}},"text":"/src/lexer/lexer.js:"},{"action":"insertText","range":{"start":{"row":9,"column":20},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":10,"column":0},"end":{"row":12,"column":0}},"lines":["\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!",""]},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":38}},"text":"/src/parser/automataLALR1Generator.js:"},{"action":"insertText","range":{"start":{"row":12,"column":38},"end":{"row":13,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":13,"column":0},"end":{"row":15,"column":0}},"lines":["\t39: \t\t\t//TODO TEST THIS",""]},{"action":"insertText","range":{"start":{"row":15,"column":0},"end":{"row":15,"column":22}},"text":"/src/parser/parser.js:"},{"action":"insertText","range":{"start":{"row":15,"column":22},"end":{"row":16,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":16,"column":0},"end":{"row":16,"column":27}},"text":"\t53: \t\t\t//TODO TEST THIS!!!"},{"action":"insertText","range":{"start":{"row":16,"column":27},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":17,"column":0},"end":{"row":34,"column":0}},"lines":["\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS",""]},{"action":"insertText","range":{"start":{"row":34,"column":0},"end":{"row":34,"column":28}},"text":"Found 22 matches in 5 files "},{"action":"insertText","range":{"start":{"row":34,"column":28},"end":{"row":35,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":36,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":0,"column":75}},"text":" (Found 22 matches in 5 files)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":9}},"text":"Searching"},{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":36,"column":0}},"nl":"\n","lines":["","/src/data/itemRule.js:","\t109: \t\t\t//TODO TEST THIS","\t146: \t\t\t//TODO TEST look ahead parameter!","","/src/data/state.js:","\t70:                 //TODO Think a way to only do this when the automata begin generated is LR(k>=1), It should be a general way to pass more options to this method","","/src/lexer/lexer.js:","\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!","","/src/parser/automataLALR1Generator.js:","\t39: \t\t\t//TODO TEST THIS","","/src/parser/parser.js:","\t53: \t\t\t//TODO TEST THIS!!!","\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS","","Found 22 matches in 5 files ",""]},{"action":"removeText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":66}},"text":"for \u0001TODO\u0001 in\u0001all favorite folders\u0001 (Found 22 matches in 5 files)"},{"action":"removeText","range":{"start":{"row":0,"column":1},"end":{"row":1,"column":0}},"text":"\n"},{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":" "},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":26}},"text":"Searching for \u0001TODO\u0001 in\u0001/\u0001"},{"action":"insertText","range":{"start":{"row":0,"column":26},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":39}},"text":"/bower_components/jasmine/GOALS_2.0.md:"},{"action":"insertText","range":{"start":{"row":2,"column":39},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":25}},"text":"\t13: * Make a `TODO` list"},{"action":"insertText","range":{"start":{"row":3,"column":25},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":6,"column":0}},"lines":["\t41: * This will be a lot of the TODOs, but clean up & simplify Env.js (is this a 2.1 task?)",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":54}},"text":"/bower_components/jasmine/lib/jasmine-core/jasmine.js:"},{"action":"insertText","range":{"start":{"row":6,"column":54},"end":{"row":7,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":7,"column":0},"end":{"row":20,"column":0}},"lines":["\t290:         fn.call(this, callDone); //TODO: do we care about more than 1 arg?","\t477:     // TODO: we may just be able to pass in the fn instead of wrapping here","\t487:     // TODO: fix this naming, and here's where the value comes in","\t526:       resultCallback: function() {} // TODO - hook this up","\t569:         //TODO?: should this return the current spy? Downside: may cause user confusion about spy state","\t1208:       // TODO: how many of these params are needed?","\t1216:           expected: expected // TODO: this may need to be arrayified/sliced","\t1248:     // TODO: this would be nice as its own Object - NegativeExpectation","\t1249:     // TODO: copy instead of mutate options","\t1259: //TODO: expectation result may make more sense as a presentation of an expectation.","\t1530:         //TODO: set a var when we catch an exception and","\t1739:   // TODO: what to do about jasmine.pp not being inject? move to JSON.stringify? gut PrettyPrinter?",""]},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":47}},"text":"/bower_components/jasmine/spec/core/EnvSpec.js:"},{"action":"insertText","range":{"start":{"row":20,"column":47},"end":{"row":21,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":21,"column":0},"end":{"row":23,"column":0}},"lines":["\t1: // TODO: Fix these unit tests!",""]},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":55}},"text":"/bower_components/jasmine/spec/core/QueueRunnerSpec.js:"},{"action":"insertText","range":{"start":{"row":23,"column":55},"end":{"row":24,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":24,"column":0},"end":{"row":26,"column":0}},"lines":["\t49:       //TODO: it would be nice if spy arity could match the fake, so we could do something like:",""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":26,"column":0}},"nl":"\n","lines":["Searching for \u0001TODO\u0001 in\u0001/\u0001","","/bower_components/jasmine/GOALS_2.0.md:","\t13: * Make a `TODO` list","\t41: * This will be a lot of the TODOs, but clean up & simplify Env.js (is this a 2.1 task?)","","/bower_components/jasmine/lib/jasmine-core/jasmine.js:","\t290:         fn.call(this, callDone); //TODO: do we care about more than 1 arg?","\t477:     // TODO: we may just be able to pass in the fn instead of wrapping here","\t487:     // TODO: fix this naming, and here's where the value comes in","\t526:       resultCallback: function() {} // TODO - hook this up","\t569:         //TODO?: should this return the current spy? Downside: may cause user confusion about spy state","\t1208:       // TODO: how many of these params are needed?","\t1216:           expected: expected // TODO: this may need to be arrayified/sliced","\t1248:     // TODO: this would be nice as its own Object - NegativeExpectation","\t1249:     // TODO: copy instead of mutate options","\t1259: //TODO: expectation result may make more sense as a presentation of an expectation.","\t1530:         //TODO: set a var when we catch an exception and","\t1739:   // TODO: what to do about jasmine.pp not being inject? move to JSON.stringify? gut PrettyPrinter?","","/bower_components/jasmine/spec/core/EnvSpec.js:","\t1: // TODO: Fix these unit tests!","","/bower_components/jasmine/spec/core/QueueRunnerSpec.js:","\t49:       //TODO: it would be nice if spy arity could match the fake, so we could do something like:",""]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":45}},"text":"Searching for \u0001TODO\u0001 in\u0001all favorite folders\u0001"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":19}},"text":"/src/data/state.js:"},{"action":"insertText","range":{"start":{"row":2,"column":19},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":165}},"text":"\t70:                 //TODO Think a way to only do this when the automata begin generated is LR(k>=1), It should be a general way to pass more options to this method"},{"action":"insertText","range":{"start":{"row":3,"column":165},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"lines":[""]},{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":20}},"text":"/src/lexer/lexer.js:"},{"action":"insertText","range":{"start":{"row":5,"column":20},"end":{"row":6,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":6,"column":0},"end":{"row":8,"column":0}},"lines":["\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":38}},"text":"/src/parser/automataLALR1Generator.js:"},{"action":"insertText","range":{"start":{"row":8,"column":38},"end":{"row":9,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":9,"column":0},"end":{"row":11,"column":0}},"lines":["\t39: \t\t\t//TODO TEST THIS",""]},{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":22}},"text":"/src/parser/parser.js:"},{"action":"insertText","range":{"start":{"row":11,"column":22},"end":{"row":12,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":27}},"text":"\t53: \t\t\t//TODO TEST THIS!!!"},{"action":"insertText","range":{"start":{"row":12,"column":27},"end":{"row":13,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":13,"column":0},"end":{"row":30,"column":0}},"lines":["\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS",""]},{"action":"insertText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":28}},"text":"Found 20 matches in 4 files "},{"action":"insertText","range":{"start":{"row":30,"column":28},"end":{"row":31,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":31,"column":0},"end":{"row":32,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":0,"column":75}},"text":" (Found 20 matches in 4 files)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":32,"column":0}},"nl":"\n","lines":["Searching for \u0001TODO\u0001 in\u0001all favorite folders\u0001 (Found 20 matches in 4 files)","","/src/data/state.js:","\t70:                 //TODO Think a way to only do this when the automata begin generated is LR(k>=1), It should be a general way to pass more options to this method","","/src/lexer/lexer.js:","\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!","","/src/parser/automataLALR1Generator.js:","\t39: \t\t\t//TODO TEST THIS","","/src/parser/parser.js:","\t53: \t\t\t//TODO TEST THIS!!!","\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS","","Found 20 matches in 4 files ",""]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":45}},"text":"Searching for \u0001TODO\u0001 in\u0001all favorite folders\u0001"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":20}},"text":"/src/lexer/lexer.js:"},{"action":"insertText","range":{"start":{"row":2,"column":20},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":69}},"text":"\t5: \t//TODO: Implement a REAL lexer. This one is just a temporal one!"},{"action":"insertText","range":{"start":{"row":3,"column":69},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":22}},"text":"/src/parser/parser.js:"},{"action":"insertText","range":{"start":{"row":5,"column":22},"end":{"row":6,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":6,"column":0},"end":{"row":24,"column":0}},"lines":["\t53: \t\t\t//TODO TEST THIS!!!","\t68: \t\t\t//TODO TEST THIS","\t70: \t\t\t\tactionToDo,","\t75: \t\t\t\tactionToDo = this.actionTable(lastItem.state.getIdentity(), this.currentInput.terminal);","\t77: \t\t\t\tif (actionToDo.action === k.parser.tableAction.ERROR)","\t79: \t\t\t\t\t//TODO Think how to express an erroro description or give some details about what happend","\t82: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.SHIFT)","\t89: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.REDUCE)","\t91: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t93: \t\t\t\telse if (actionToDo.action === k.parser.tableAction.ACCEPT)","\t95: \t\t\t\t\tlastItem = this._reduce(actionToDo);","\t118: \t\t* @param {Rule} actionToDo.rule The by which the reduce aciton will take place","\t120: \t\tparser.prototype._reduce = function (actionToDo)","\t122: \t\t\t//TODO DO","\t130: \t\t\t\trule = actionToDo.rule,","\t134: \t\t\t\t//TODO DO THIS","\t198: \t\t\t//TODO TEST THIS",""]},{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":24,"column":28}},"text":"Found 18 matches in 2 files "},{"action":"insertText","range":{"start":{"row":24,"column":28},"end":{"row":25,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":25,"column":0},"end":{"row":26,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":0,"column":75}},"text":" (Found 18 matches in 2 files)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":22}},"text":"/src/data/automata.js:"},{"action":"insertText","range":{"start":{"row":2,"column":22},"end":{"row":3,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":52}},"text":"\t52:         automata.prototype.isValid = function()"},{"action":"insertText","range":{"start":{"row":3,"column":52},"end":{"row":4,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":4,"column":0},"end":{"row":6,"column":0}},"lines":["\t56:                 return !state.isValid(this.hasLookAhead);",""]},{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":19}},"text":"/src/data/state.js:"},{"action":"insertText","range":{"start":{"row":6,"column":19},"end":{"row":7,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":7,"column":0},"end":{"row":9,"column":0}},"lines":["\t211:         state.prototype.isValid = function(considerLookAhead) {",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":39}},"text":"/src/parser/automataLRGeneratorBase.js:"},{"action":"insertText","range":{"start":{"row":9,"column":39},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":56}},"text":"\t93: \t\t\tif (!options.notValidate && !automata.isValid())"},{"action":"insertText","range":{"start":{"row":10,"column":56},"end":{"row":11,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":11,"column":0},"end":{"row":12,"column":0}},"lines":[""]},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":27}},"text":"Found 4 matches in 3 files "},{"action":"insertText","range":{"start":{"row":12,"column":27},"end":{"row":13,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":13,"column":0},"end":{"row":14,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":0,"column":48},"end":{"row":0,"column":77}},"text":" (Found 4 matches in 3 files)"}]}]]},"ace":{"folds":[],"customSyntax":"c9search","scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":32},"end":{"row":3,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1409437332392}