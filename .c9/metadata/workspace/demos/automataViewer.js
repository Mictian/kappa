{"changed":true,"filter":false,"title":"automataViewer.js","tooltip":"/demos/automataViewer.js","value":"/* global Springy: true */\n(function()\n{\n    'use strict';\n\n    require.config({\n        baseUrl: '../src'\n    });\n\n    require(['../data/sampleGrammars', '../parser/automataLALR1Generator'], function (sampleGrammars, k)\n    {\n        var grammar = sampleGrammars.numDiff.g, //aPlusb.g,\n            automataGenerator = new k.parser.AutomataLALR1Generator({\n                grammar: grammar\n            }),\n            automata = automataGenerator.generateAutomata({notValidate:true}),\n            states = automata.states,\n            indexedStates = {},\n            graph = new Springy.Graph();\n\n        k.utils.obj.each(states, function(state)\n        {\n            indexedStates[state.getIdentity()] = new Springy.Node(state.getIdentity(), {\n                lrState: state,\n                //Each node text\n                label: state.getIdentity() //getCondencedString() //toString()\n            });\n            graph.addNode(indexedStates[state.getIdentity()]);\n\n        });\n\n        k.utils.obj.each(states, function(state)\n        {\n            k.utils.obj.each(state.transitions, function(transition)\n            {\n                 graph.newEdge(indexedStates[state.getIdentity()], indexedStates[transition.state.getIdentity()], {\n                     label: transition.symbol.toString(),\n                     color: transition.state.isAcceptanceState ? '#FF0000' : undefined\n                 });\n            });\n        });\n\n        //TODO FIX LOOP EDGES\n\n        jQuery('#springydemo').springy({\n            graph: graph\n        });\n\n        var entityMap = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            \"/\": '&#x2F;'\n        };\n\n        function escapeHtml(string) {\n            return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n                return entityMap[s];\n            });\n        }\n\n        // var gotoTable = automataGenerator.generateGOTOTable(automata);\n        // var foo = gotoTable.toString();\n        jQuery('#grammarShower').html(escapeHtml(grammar.toString()).replace(/\\n/g,'<br/>'));\n\n    });\n\n})();","undoManager":{"mark":-1,"position":1,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":15},"end":{"row":9,"column":16}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":41},"end":{"row":9,"column":42}},"text":"."}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":25,"column":9},"end":{"row":25,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1409190938115}