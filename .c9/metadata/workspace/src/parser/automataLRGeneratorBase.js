{"filter":false,"title":"automataLRGeneratorBase.js","tooltip":"/src/parser/automataLRGeneratorBase.js","undoManager":{"mark":98,"position":98,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":95}},"text":"define(['../utils/obj', '../data/grammar', '../data/itemRule', '../data/automata'], function(k)"},{"action":"insertText","range":{"start":{"row":0,"column":95},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":340,"column":0}},"lines":["{","\t'use strict';","\t","\t/*Enum for valid action in an action table","\t* @readonly","\t* @enum {String}","\t*/","\tvar tableAction = {","\t\tSHIFT: 'SHIFT',","\t\tREDUCE: 'REDUCE',","\t\tERROR: 'ERROR',","\t\tACCEPT: 'ACCEPT'","\t};","","\t/* Automata Generator","\t* @class","\t* @classdesc This class is reponsible for given a grammar create a new LR(0) automata */","\tvar AutomataLR0Generator = (function()","\t{","\t\t/*","\t\t* Initialize a new Automaton Generator","\t\t*","\t\t* @constructor","\t\t* @param {Grammar} options.grammar Grammar used to generate the automata","\t\t*/","\t\tvar automataGenerator = function (options)","\t\t{","\t\t\tthis.options = options;","\t\t\t","\t\t\tk.utils.obj.defineProperty(this, 'grammar');","","\t\t\tif (!(this.grammar instanceof k.data.Grammar))","\t\t\t{","\t\t\t\tthrow new Error('In order to create a new Automata LR(0) Generator please provide a grammar!');","\t\t\t}","\t\t};","","\t\t/* @function Expands a state adding in it the full list of require items (item rules)","\t\t* @param {State} currentState State that will be expanded","\t\t* @returns The full state with all its require items */","\t\tautomataGenerator.prototype.expandItem = function (currentState)","\t\t{","\t\t\t//TODO TEST THIS WITH LOOK AHEAD!!","\t\t\t// The inital rule is first added and then this method is called","\t\t\tvar currentSymbol,","\t\t\t\tcurrentItem = currentState.getNextItem(),","\t\t\t\tlookAhead;","","\t\t\twhile (currentItem) {","\t\t\t\tcurrentSymbol = currentItem.getCurrentSymbol();","","\t\t\t\tif (currentSymbol instanceof k.data.NonTerminal)","\t\t\t\t{","\t\t\t\t\tlookAhead = this._getFirstSet(currentItem);","\t\t\t\t\tcurrentState.addItems(k.data.ItemRule.newFromRules(this.grammar.getRulesFromNonTerminal(currentSymbol), lookAhead));","\t\t\t\t}","","\t\t\t\tcurrentItem = currentState.getNextItem();","\t\t\t}","","\t\t\treturn currentState;","\t\t};","\t\t","\t\t/* @function Gets the array of look-ahead for the particular item rule taking into account the dot location fo the specified item rule.","\t\t* @param {ItemRule} itemRule Item rule to find FIRST Set","\t\t* @returns {[Terminals]} First set for specified look ahead */","\t\tautomataGenerator.prototype._getFirstSet = function (itemRule)","\t\t{","\t\t\t//TODO TEST THIS","\t\t\tvar symbolsToTraverse = itemRule.rule.tail.slice(itemRule.dotLocation + 1),","\t\t\t\trequestedFirstSet = [];","\t\t\t\t","\t\t\tsymbolsToTraverse = symbolsToTraverse.concat(itemRule.lookAhead);","\t\t\t","\t\t\tk.utils.obj.find(symbolsToTraverse, function (symbolTraversed)","\t\t\t{","\t\t\t\tif (symbolTraversed instanceof k.data.NonTerminal)","\t\t\t\t{","\t\t\t\t\trequestedFirstSet = requestedFirstSet.concat(this.grammar.firstSetsByHeader[symbolTraversed.name]);","\t\t\t\t\trequestedFirstSet = k.utils.obj.uniq(requestedFirstSet, false, function (item) {return item.name;});","\t\t\t\t\treturn !symbolTraversed.isNullable;","\t\t\t\t}","\t\t\t\telse if (symbolTraversed instanceof k.data.Terminal)","\t\t\t\t{","\t\t\t\t\trequestedFirstSet.push(symbolTraversed);","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t\telse if (symbolTraversed.isSpecial && symbolTraversed.name === k.data.specialSymbol.EOF)","\t\t\t\t{","\t\t\t\t\trequestedFirstSet.push(symbolTraversed);","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t\telse ","\t\t\t\t{","\t\t\t\t\tthrow new Error('Invalid Item Rule. Impossible calculate first set. Item Rule: ' + itemRule.toString());","\t\t\t\t}","\t\t\t\t","\t\t\t}, this);","\t\t\t","\t\t\treturn requestedFirstSet;","\t\t};","","\t\t/* @function Generate the LALR(1) automata","\t\t* @returns {Automata} The corresponding automata for the specified grammar */","\t\tautomataGenerator.prototype.generateAutomata = function()","\t\t{","\t\t\t//TODO TEST THIS","\t\t\tvar automata = this._generateAutomata();","\t\t\t","\t\t\t// if (automata.isValid())","\t\t\t// {","\t\t\t// \treturn automata;","\t\t\t// }","\t\t\t","\t\t\t//TODO Factorize this class and this line put it only on the LR1+ generator","\t\t\tautomata.hasLookAhead = true;","\t\t\t","\t\t\treturn automata;","\t\t};","\t\t","\t\t/* @function Generate the LR(0) automata","\t\t* @returns {Automata} The corresponding automata for the specified grammar */","\t\tautomataGenerator.prototype._generateAutomata = function()","\t\t{","\t\t\tvar initialState = new k.data.State({","\t\t\t\t\titems: [new k.data.ItemRule({","\t\t\t\t\t\trule: this.grammar.getRulesFromNonTerminal(this.grammar.startSymbol)[0],","\t\t\t\t\t\tlookAhead: [new k.data.Symbol({name: k.data.specialSymbol.EOF, isSpecial: true})]","\t\t\t\t\t})]","\t\t\t\t}),","\t\t\t\tautomata = new k.data.Automata({","\t\t\t\t  states: [this.expandItem(initialState)]","\t\t\t\t});","","\t\t\tautomata.initialStateAccessor(initialState);","\t\t\tthis._expandAutomata(automata);","\t\t\treturn automata;","\t\t};","","\t\t/* @function Internal method which resive an inital automata with only it inital state and generate a full automata","\t\t* @param {Automata} automata Automatma to be expanded","\t\t* @returns {Automata} A full automata */","\t\tautomataGenerator.prototype._expandAutomata = function(automata)","\t\t{","\t\t\tvar currentState = automata.getNextState();","\t\t\t","\t\t\twhile (currentState) {","","\t\t\t\t//Get all valid symbol from which the current state can have transitions","\t\t\t\tvar supportedTransitions = currentState.getSupportedTransitionSymbols(),","\t\t\t\t\taddedState, //To control duplicated states","\t\t\t\t\tnewItemRules = [];","","\t\t\t\t// For each supported transicion from the current state, explore neighbours states ","\t\t\t\t//Warning remove to create function inside this loop","\t\t\t\t/*jshint -W083 */","\t\t\t\tk.utils.obj.each(supportedTransitions, function (supportedTransition)","\t\t\t\t{","\t\t\t\t\t// for the current new neighbour of the current state, generate the basic state with the known items","\t\t\t\t\tk.utils.obj.each(supportedTransition.items, function (supportedItem)","\t\t\t\t\t{","\t\t\t\t\t\t// Because each item in the supported transition does NOT move the dot location when retrieved from the state, we MUST do that here","\t\t\t\t\t\tnewItemRules.push(supportedItem.clone({","\t\t\t\t\t\t\tdotLocationIncrement: 1","\t\t\t\t\t\t}));","\t\t\t\t\t});","","\t\t\t\t\tvar newState = new k.data.State({","\t\t\t\t\t\titems: newItemRules","\t\t\t\t\t});","","\t\t\t\t\tthis.expandItem(newState);","\t\t\t\t\t// Add state controlling duplicated ones","\t\t\t\t\taddedState = automata.addState(newState);","","\t\t\t\t\t// We determien if the new state is an acceptance state, if it has only the augmented rule in reduce state.    ","\t\t\t\t\taddedState.isAcceptanceState = !!(addedState.getOriginalItems().length === 1 && addedState.getOriginalItems()[0].rule.name === k.data.Grammar.constants.AugmentedRuleName && addedState.getOriginalItems()[0].dotLocation === 2);","\t\t\t\t\tcurrentState.addTransition(supportedTransition.symbol, addedState);","","\t\t\t\t\tnewItemRules = [];","\t\t\t\t}, this);","","\t\t\t\tcurrentState = automata.getNextState();","\t\t\t}","\t\t};","\t\t","\t\t/* @function Given an automata returnes its GOTO Table. The table is represented by an object where each state is a property (row) and each possible symbol is a property of the previous object (column)","\t\t* Sample: table[<state>][<symbol>] = [undefined = error|<state id - string>]","\t\t* @param {Automata} automata Automatma used as a base of the calculation","\t\t* @returns {Object} A GOTO Table */","\t\tautomataGenerator.prototype.generateGOTOTable = function(automata)","\t\t{","\t\t\tvar table = {","\t\t\t\t\ttoString: function ()","\t\t\t\t\t{","\t\t\t\t\t\tvar str = '',","\t\t\t\t\t\t\tself = this,","\t\t\t\t\t\t\tthat;","\t\t\t\t\t\t\t","\t\t\t\t\t\tk.utils.obj.each(k.utils.obj.keys(this), function (stateId)","\t\t\t\t\t\t{","\t\t\t\t\t\t\tif (k.utils.obj.isObject(self[stateId]))","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tthat = self[stateId];","\t\t\t\t\t\t\t\tstr += '\\n' + stateId;","\t\t\t\t\t\t\t\tk.utils.obj.each(k.utils.obj.keys(self[stateId]), function (symbol)","\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\tstr += '\\n      --> (' + symbol + ') = ' + that[symbol]; ","\t\t\t\t\t\t\t\t});","\t\t\t\t\t\t\t}","\t\t\t\t\t\t});","\t\t\t\t\t\treturn str;","\t\t\t\t\t}","\t\t\t\t};","\t\t\t","\t\t\tk.utils.obj.each(automata.states, function (state) {","\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t","\t\t\t\tk.utils.obj.each(state.transitions, function (transition) {","\t\t\t\t\ttable[state.getIdentity()][transition.symbol.toString()] = transition.state;","\t\t\t\t});","\t\t\t});","\t\t\t","\t\t\treturn table;","\t\t};","\t\t","\t\t/* @function Given an automata returnes its ACTION Table. ","\t\t* @param {Automata} automata Automatma used as a base of the calculation","\t\t* @returns {Function} Function that given the a state id and a lookAhead returns the action to take */","\t\tautomataGenerator.prototype.generateACTIONTable = function (automata)","\t\t{","\t\t\tvar table = {};","\t\t\t","\t\t\tif (!automata.hasLookAhead)","\t\t\t{","\t\t\t\tk.utils.obj.each(automata.states, function(state)","\t\t\t\t{","\t\t\t\t\tvar stateItems = state.getItems();","\t\t\t\t\t","\t\t\t\t\t// If it is a REDUCE state","\t\t\t\t\tif (stateItems.length === 1 && stateItems[0].dotLocation === (stateItems[0].rule.tail.length))","\t\t\t\t\t{","\t\t\t\t\t\t// S'--> S#*","\t\t\t\t\t\tif (state.isAcceptanceState) {","\t\t\t\t\t\t\t table[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t\telse ","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t// SHIFT state","\t\t\t\t\t} else {","\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\t//TODO TEST THIS!!!!!!","\t\t\t\t","\t\t\t\tk.utils.obj.each(automata.states, function (state)","\t\t\t\t{","\t\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t\t","\t\t\t\t\tif (state.isAcceptanceState)","\t\t\t\t\t{","\t\t\t\t\t\ttable[state.getIdentity()][k.data.specialSymbol.EOF] = {","\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\trule: state.getOriginalItems()[0].rule //As we augment the grammar in the acceptance state is should be only one rule, the augmented rule, for that reason is the 0","\t\t\t\t\t\t};","\t\t\t\t\t} ","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\t//Shift Items","\t\t\t\t\t\tvar shiftTransitions = k.utils.obj.filter(state.getSupportedTransitionSymbols(), function (supportedTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\treturn supportedTransition.symbol instanceof k.data.Terminal ||","\t\t\t\t\t\t\t\t\t(supportedTransition.symbol instanceof k.data.Symbol && supportedTransition.symbol.isSpecial && supportedTransition.symbol.name === k.data.specialSymbol.EOF);","\t\t\t\t\t\t});","\t\t\t\t\t\tk.utils.obj.each(shiftTransitions, function (shiftTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()][shiftTransition.symbol.name] = {","\t\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t\t};","\t\t\t\t\t\t});","\t\t\t\t\t\t","\t\t\t\t\t\t//Reduce Items","\t\t\t\t\t\tvar reduceItems = state.getRecudeItems();","\t\t\t\t\t\t//IMPORTANT: At this point the autoamta MUST be already validated, ensuring us that the lookAhead sets ARE DISJOINT","\t\t\t\t\t\tk.utils.obj.each(reduceItems, function (reduceItemRule)","\t\t\t\t\t\t{","\t\t\t\t\t\t\tk.utils.obj.each(reduceItemRule.lookAhead, function (reduceSymbol)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\ttable[state.getIdentity()][reduceSymbol.name] = {","\t\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\t\trule: reduceItemRule.rule","\t\t\t\t\t\t\t\t};","\t\t\t\t\t\t\t});\t","\t\t\t\t\t\t});","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\t","\t\t\treturn (function (hasLookAhead, actionTable) {","\t\t\t\treturn function (currentStateId, look_ahead)","\t\t\t\t{","\t\t\t\t\tif (!hasLookAhead)","\t\t\t\t\t{","\t\t\t\t\t\treturn actionTable[currentStateId] || {","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t\t","\t\t\t\t\treturn (actionTable[currentStateId] && actionTable[currentStateId][look_ahead.name] ) || ","\t\t\t\t\t\t{","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t","\t\t\t\t};","\t\t\t})(automata.hasLookAhead, table);","\t\t};","","\t\treturn automataGenerator;","\t})();","","\tk.parser = k.utils.obj.extend(k.parser || {}, {","\t\tAutomataLR0Generator: AutomataLR0Generator,","\t\ttableAction: tableAction","\t});","","\treturn k;"]},{"action":"insertText","range":{"start":{"row":340,"column":0},"end":{"row":340,"column":3}},"text":"});"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":15},"end":{"row":18,"column":16}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":14},"end":{"row":18,"column":15}},"text":"R"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":13},"end":{"row":18,"column":14}},"text":"L"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":22},"end":{"row":18,"column":23}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":23},"end":{"row":18,"column":24}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":24},"end":{"row":18,"column":25}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":25},"end":{"row":18,"column":26}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":23}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":27}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":59},"end":{"row":34,"column":60}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":58},"end":{"row":34,"column":59}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":57},"end":{"row":34,"column":58}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":56},"end":{"row":34,"column":57}},"text":"R"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":55},"end":{"row":34,"column":56}},"text":"L"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":54},"end":{"row":34,"column":55}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":27}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":27}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":2},"end":{"row":41,"column":19}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":41,"column":2},"end":{"row":41,"column":23}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":101,"column":0},"end":{"row":101,"column":4}},"text":"\t\t};"},{"action":"removeLines","range":{"start":{"row":65,"column":0},"end":{"row":101,"column":0}},"nl":"\n","lines":["\t\t* @param {ItemRule} itemRule Item rule to find FIRST Set","\t\t* @returns {[Terminals]} First set for specified look ahead */","\t\tautomataGenerator.prototype._getFirstSet = function (itemRule)","\t\t{","\t\t\t//TODO TEST THIS","\t\t\tvar symbolsToTraverse = itemRule.rule.tail.slice(itemRule.dotLocation + 1),","\t\t\t\trequestedFirstSet = [];","\t\t\t\t","\t\t\tsymbolsToTraverse = symbolsToTraverse.concat(itemRule.lookAhead);","\t\t\t","\t\t\tk.utils.obj.find(symbolsToTraverse, function (symbolTraversed)","\t\t\t{","\t\t\t\tif (symbolTraversed instanceof k.data.NonTerminal)","\t\t\t\t{","\t\t\t\t\trequestedFirstSet = requestedFirstSet.concat(this.grammar.firstSetsByHeader[symbolTraversed.name]);","\t\t\t\t\trequestedFirstSet = k.utils.obj.uniq(requestedFirstSet, false, function (item) {return item.name;});","\t\t\t\t\treturn !symbolTraversed.isNullable;","\t\t\t\t}","\t\t\t\telse if (symbolTraversed instanceof k.data.Terminal)","\t\t\t\t{","\t\t\t\t\trequestedFirstSet.push(symbolTraversed);","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t\telse if (symbolTraversed.isSpecial && symbolTraversed.name === k.data.specialSymbol.EOF)","\t\t\t\t{","\t\t\t\t\trequestedFirstSet.push(symbolTraversed);","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t\telse ","\t\t\t\t{","\t\t\t\t\tthrow new Error('Invalid Item Rule. Impossible calculate first set. Item Rule: ' + itemRule.toString());","\t\t\t\t}","\t\t\t\t","\t\t\t}, this);","\t\t\t","\t\t\treturn requestedFirstSet;"]},{"action":"removeText","range":{"start":{"row":64,"column":1},"end":{"row":64,"column":137}},"text":"\t/* @function Gets the array of look-ahead for the particular item rule taking into account the dot location fo the specified item rule."},{"action":"removeText","range":{"start":{"row":64,"column":1},"end":{"row":65,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":63,"column":0},"end":{"row":63,"column":2}},"text":"\t\t"},{"action":"removeText","range":{"start":{"row":62,"column":4},"end":{"row":63,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":67,"column":2},"end":{"row":67,"column":19}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":67,"column":2},"end":{"row":67,"column":23}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":192,"column":2},"end":{"row":192,"column":19}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":192,"column":2},"end":{"row":192,"column":23}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":291,"column":0},"end":{"row":291,"column":2}},"text":"\t\t"},{"action":"removeLines","range":{"start":{"row":193,"column":0},"end":{"row":291,"column":0}},"nl":"\n","lines":["\t\t{","\t\t\tvar table = {};","\t\t\t","\t\t\tif (!automata.hasLookAhead)","\t\t\t{","\t\t\t\tk.utils.obj.each(automata.states, function(state)","\t\t\t\t{","\t\t\t\t\tvar stateItems = state.getItems();","\t\t\t\t\t","\t\t\t\t\t// If it is a REDUCE state","\t\t\t\t\tif (stateItems.length === 1 && stateItems[0].dotLocation === (stateItems[0].rule.tail.length))","\t\t\t\t\t{","\t\t\t\t\t\t// S'--> S#*","\t\t\t\t\t\tif (state.isAcceptanceState) {","\t\t\t\t\t\t\t table[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t\telse ","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t// SHIFT state","\t\t\t\t\t} else {","\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\t//TODO TEST THIS!!!!!!","\t\t\t\t","\t\t\t\tk.utils.obj.each(automata.states, function (state)","\t\t\t\t{","\t\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t\t","\t\t\t\t\tif (state.isAcceptanceState)","\t\t\t\t\t{","\t\t\t\t\t\ttable[state.getIdentity()][k.data.specialSymbol.EOF] = {","\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\trule: state.getOriginalItems()[0].rule //As we augment the grammar in the acceptance state is should be only one rule, the augmented rule, for that reason is the 0","\t\t\t\t\t\t};","\t\t\t\t\t} ","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\t//Shift Items","\t\t\t\t\t\tvar shiftTransitions = k.utils.obj.filter(state.getSupportedTransitionSymbols(), function (supportedTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\treturn supportedTransition.symbol instanceof k.data.Terminal ||","\t\t\t\t\t\t\t\t\t(supportedTransition.symbol instanceof k.data.Symbol && supportedTransition.symbol.isSpecial && supportedTransition.symbol.name === k.data.specialSymbol.EOF);","\t\t\t\t\t\t});","\t\t\t\t\t\tk.utils.obj.each(shiftTransitions, function (shiftTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()][shiftTransition.symbol.name] = {","\t\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t\t};","\t\t\t\t\t\t});","\t\t\t\t\t\t","\t\t\t\t\t\t//Reduce Items","\t\t\t\t\t\tvar reduceItems = state.getRecudeItems();","\t\t\t\t\t\t//IMPORTANT: At this point the autoamta MUST be already validated, ensuring us that the lookAhead sets ARE DISJOINT","\t\t\t\t\t\tk.utils.obj.each(reduceItems, function (reduceItemRule)","\t\t\t\t\t\t{","\t\t\t\t\t\t\tk.utils.obj.each(reduceItemRule.lookAhead, function (reduceSymbol)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\ttable[state.getIdentity()][reduceSymbol.name] = {","\t\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\t\trule: reduceItemRule.rule","\t\t\t\t\t\t\t\t};","\t\t\t\t\t\t\t});\t","\t\t\t\t\t\t});","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\t","\t\t\treturn (function (hasLookAhead, actionTable) {","\t\t\t\treturn function (currentStateId, look_ahead)","\t\t\t\t{","\t\t\t\t\tif (!hasLookAhead)","\t\t\t\t\t{","\t\t\t\t\t\treturn actionTable[currentStateId] || {","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t\t","\t\t\t\t\treturn (actionTable[currentStateId] && actionTable[currentStateId][look_ahead.name] ) || ","\t\t\t\t\t\t{","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t","\t\t\t\t};","\t\t\t})(automata.hasLookAhead, table);"]},{"action":"removeText","range":{"start":{"row":192,"column":75},"end":{"row":193,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":192,"column":75},"end":{"row":192,"column":76}},"text":"{"},{"action":"insertText","range":{"start":{"row":192,"column":76},"end":{"row":193,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":193,"column":0},"end":{"row":291,"column":0}},"lines":["\t\t{","\t\t\tvar table = {};","\t\t\t","\t\t\tif (!automata.hasLookAhead)","\t\t\t{","\t\t\t\tk.utils.obj.each(automata.states, function(state)","\t\t\t\t{","\t\t\t\t\tvar stateItems = state.getItems();","\t\t\t\t\t","\t\t\t\t\t// If it is a REDUCE state","\t\t\t\t\tif (stateItems.length === 1 && stateItems[0].dotLocation === (stateItems[0].rule.tail.length))","\t\t\t\t\t{","\t\t\t\t\t\t// S'--> S#*","\t\t\t\t\t\tif (state.isAcceptanceState) {","\t\t\t\t\t\t\t table[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t\telse ","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t// SHIFT state","\t\t\t\t\t} else {","\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\t//TODO TEST THIS!!!!!!","\t\t\t\t","\t\t\t\tk.utils.obj.each(automata.states, function (state)","\t\t\t\t{","\t\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t\t","\t\t\t\t\tif (state.isAcceptanceState)","\t\t\t\t\t{","\t\t\t\t\t\ttable[state.getIdentity()][k.data.specialSymbol.EOF] = {","\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\trule: state.getOriginalItems()[0].rule //As we augment the grammar in the acceptance state is should be only one rule, the augmented rule, for that reason is the 0","\t\t\t\t\t\t};","\t\t\t\t\t} ","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\t//Shift Items","\t\t\t\t\t\tvar shiftTransitions = k.utils.obj.filter(state.getSupportedTransitionSymbols(), function (supportedTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\treturn supportedTransition.symbol instanceof k.data.Terminal ||","\t\t\t\t\t\t\t\t\t(supportedTransition.symbol instanceof k.data.Symbol && supportedTransition.symbol.isSpecial && supportedTransition.symbol.name === k.data.specialSymbol.EOF);","\t\t\t\t\t\t});","\t\t\t\t\t\tk.utils.obj.each(shiftTransitions, function (shiftTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()][shiftTransition.symbol.name] = {","\t\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t\t};","\t\t\t\t\t\t});","\t\t\t\t\t\t","\t\t\t\t\t\t//Reduce Items","\t\t\t\t\t\tvar reduceItems = state.getRecudeItems();","\t\t\t\t\t\t//IMPORTANT: At this point the autoamta MUST be already validated, ensuring us that the lookAhead sets ARE DISJOINT","\t\t\t\t\t\tk.utils.obj.each(reduceItems, function (reduceItemRule)","\t\t\t\t\t\t{","\t\t\t\t\t\t\tk.utils.obj.each(reduceItemRule.lookAhead, function (reduceSymbol)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\ttable[state.getIdentity()][reduceSymbol.name] = {","\t\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\t\trule: reduceItemRule.rule","\t\t\t\t\t\t\t\t};","\t\t\t\t\t\t\t});\t","\t\t\t\t\t\t});","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\t","\t\t\treturn (function (hasLookAhead, actionTable) {","\t\t\t\treturn function (currentStateId, look_ahead)","\t\t\t\t{","\t\t\t\t\tif (!hasLookAhead)","\t\t\t\t\t{","\t\t\t\t\t\treturn actionTable[currentStateId] || {","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t\t","\t\t\t\t\treturn (actionTable[currentStateId] && actionTable[currentStateId][look_ahead.name] ) || ","\t\t\t\t\t\t{","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t","\t\t\t\t};","\t\t\t})(automata.hasLookAhead, table);"]},{"action":"insertText","range":{"start":{"row":291,"column":0},"end":{"row":291,"column":3}},"text":"\t\t}"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":291,"column":0},"end":{"row":291,"column":3}},"text":"\t\t}"},{"action":"removeLines","range":{"start":{"row":194,"column":0},"end":{"row":291,"column":0}},"nl":"\n","lines":["\t\t\tvar table = {};","\t\t\t","\t\t\tif (!automata.hasLookAhead)","\t\t\t{","\t\t\t\tk.utils.obj.each(automata.states, function(state)","\t\t\t\t{","\t\t\t\t\tvar stateItems = state.getItems();","\t\t\t\t\t","\t\t\t\t\t// If it is a REDUCE state","\t\t\t\t\tif (stateItems.length === 1 && stateItems[0].dotLocation === (stateItems[0].rule.tail.length))","\t\t\t\t\t{","\t\t\t\t\t\t// S'--> S#*","\t\t\t\t\t\tif (state.isAcceptanceState) {","\t\t\t\t\t\t\t table[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t\telse ","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\trule: stateItems[0].rule","\t\t\t\t\t\t\t};","\t\t\t\t\t\t}","\t\t\t\t\t// SHIFT state","\t\t\t\t\t} else {","\t\t\t\t\t\ttable[state.getIdentity()] = {","\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\t//TODO TEST THIS!!!!!!","\t\t\t\t","\t\t\t\tk.utils.obj.each(automata.states, function (state)","\t\t\t\t{","\t\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t\t","\t\t\t\t\tif (state.isAcceptanceState)","\t\t\t\t\t{","\t\t\t\t\t\ttable[state.getIdentity()][k.data.specialSymbol.EOF] = {","\t\t\t\t\t\t\taction: tableAction.ACCEPT,","\t\t\t\t\t\t\trule: state.getOriginalItems()[0].rule //As we augment the grammar in the acceptance state is should be only one rule, the augmented rule, for that reason is the 0","\t\t\t\t\t\t};","\t\t\t\t\t} ","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\t//Shift Items","\t\t\t\t\t\tvar shiftTransitions = k.utils.obj.filter(state.getSupportedTransitionSymbols(), function (supportedTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\treturn supportedTransition.symbol instanceof k.data.Terminal ||","\t\t\t\t\t\t\t\t\t(supportedTransition.symbol instanceof k.data.Symbol && supportedTransition.symbol.isSpecial && supportedTransition.symbol.name === k.data.specialSymbol.EOF);","\t\t\t\t\t\t});","\t\t\t\t\t\tk.utils.obj.each(shiftTransitions, function (shiftTransition)","\t\t\t\t\t\t{","\t\t\t\t\t\t\ttable[state.getIdentity()][shiftTransition.symbol.name] = {","\t\t\t\t\t\t\t\taction: tableAction.SHIFT","\t\t\t\t\t\t\t};","\t\t\t\t\t\t});","\t\t\t\t\t\t","\t\t\t\t\t\t//Reduce Items","\t\t\t\t\t\tvar reduceItems = state.getRecudeItems();","\t\t\t\t\t\t//IMPORTANT: At this point the autoamta MUST be already validated, ensuring us that the lookAhead sets ARE DISJOINT","\t\t\t\t\t\tk.utils.obj.each(reduceItems, function (reduceItemRule)","\t\t\t\t\t\t{","\t\t\t\t\t\t\tk.utils.obj.each(reduceItemRule.lookAhead, function (reduceSymbol)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\ttable[state.getIdentity()][reduceSymbol.name] = {","\t\t\t\t\t\t\t\t\taction: tableAction.REDUCE,","\t\t\t\t\t\t\t\t\trule: reduceItemRule.rule","\t\t\t\t\t\t\t\t};","\t\t\t\t\t\t\t});\t","\t\t\t\t\t\t});","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","\t\t\t","\t\t\treturn (function (hasLookAhead, actionTable) {","\t\t\t\treturn function (currentStateId, look_ahead)","\t\t\t\t{","\t\t\t\t\tif (!hasLookAhead)","\t\t\t\t\t{","\t\t\t\t\t\treturn actionTable[currentStateId] || {","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t}","\t\t\t\t\t","\t\t\t\t\treturn (actionTable[currentStateId] && actionTable[currentStateId][look_ahead.name] ) || ","\t\t\t\t\t\t{","\t\t\t\t\t\t\taction: tableAction.ERROR","\t\t\t\t\t\t};","\t\t\t\t\t","\t\t\t\t};","\t\t\t})(automata.hasLookAhead, table);"]},{"action":"removeText","range":{"start":{"row":193,"column":3},"end":{"row":194,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":193,"column":0},"end":{"row":193,"column":3}},"text":"\t\t{"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":192,"column":76},"end":{"row":193,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":194,"column":9},"end":{"row":194,"column":26}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":194,"column":9},"end":{"row":194,"column":30}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":198,"column":2},"end":{"row":198,"column":22}},"text":"AutomataLR0Generator"},{"action":"insertText","range":{"start":{"row":198,"column":2},"end":{"row":198,"column":23}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":198,"column":25},"end":{"row":198,"column":45}},"text":"AutomataLR0Generator"},{"action":"insertText","range":{"start":{"row":198,"column":25},"end":{"row":198,"column":46}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":153,"column":2},"end":{"row":153,"column":19}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":153,"column":2},"end":{"row":153,"column":23}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":187,"column":0},"end":{"row":187,"column":2}},"text":"\t\t"},{"action":"removeLines","range":{"start":{"row":155,"column":0},"end":{"row":187,"column":0}},"nl":"\n","lines":["\t\t\tvar table = {","\t\t\t\t\ttoString: function ()","\t\t\t\t\t{","\t\t\t\t\t\tvar str = '',","\t\t\t\t\t\t\tself = this,","\t\t\t\t\t\t\tthat;","\t\t\t\t\t\t\t","\t\t\t\t\t\tk.utils.obj.each(k.utils.obj.keys(this), function (stateId)","\t\t\t\t\t\t{","\t\t\t\t\t\t\tif (k.utils.obj.isObject(self[stateId]))","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tthat = self[stateId];","\t\t\t\t\t\t\t\tstr += '\\n' + stateId;","\t\t\t\t\t\t\t\tk.utils.obj.each(k.utils.obj.keys(self[stateId]), function (symbol)","\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\tstr += '\\n      --> (' + symbol + ') = ' + that[symbol]; ","\t\t\t\t\t\t\t\t});","\t\t\t\t\t\t\t}","\t\t\t\t\t\t});","\t\t\t\t\t\treturn str;","\t\t\t\t\t}","\t\t\t\t};","\t\t\t","\t\t\tk.utils.obj.each(automata.states, function (state) {","\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t","\t\t\t\tk.utils.obj.each(state.transitions, function (transition) {","\t\t\t\t\ttable[state.getIdentity()][transition.symbol.toString()] = transition.state;","\t\t\t\t});","\t\t\t});","\t\t\t","\t\t\treturn table;"]},{"action":"removeText","range":{"start":{"row":154,"column":3},"end":{"row":155,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":154,"column":0},"end":{"row":154,"column":2}},"text":"\t\t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":153,"column":72},"end":{"row":154,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":105,"column":2},"end":{"row":105,"column":19}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":105,"column":2},"end":{"row":105,"column":23}},"text":"AutomataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":7}},"text":"A"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":7}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":2},"end":{"row":41,"column":23}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":41,"column":2},"end":{"row":41,"column":23}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":67,"column":2},"end":{"row":67,"column":23}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":67,"column":2},"end":{"row":67,"column":23}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":85,"column":2},"end":{"row":85,"column":19}},"text":"automataGenerator"},{"action":"insertText","range":{"start":{"row":85,"column":2},"end":{"row":85,"column":23}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":105,"column":2},"end":{"row":105,"column":23}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":105,"column":2},"end":{"row":105,"column":23}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":86,"column":3},"end":{"row":87,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":87,"column":0},"end":{"row":87,"column":6}},"text":"\t\t    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":6},"end":{"row":87,"column":7}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":7},"end":{"row":87,"column":8}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":8},"end":{"row":87,"column":9}},"text":"E"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":9},"end":{"row":87,"column":10}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":10},"end":{"row":87,"column":11}},"text":"I"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":11},"end":{"row":87,"column":12}},"text":"T"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":12},"end":{"row":87,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":13},"end":{"row":87,"column":14}},"text":"T"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":14},"end":{"row":87,"column":15}},"text":"H"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":15},"end":{"row":87,"column":16}},"text":"I"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":16},"end":{"row":87,"column":17}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":17},"end":{"row":87,"column":18}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":18},"end":{"row":87,"column":19}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":19},"end":{"row":87,"column":20}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":87,"column":20},"end":{"row":87,"column":21}},"text":"!"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":154,"column":2},"end":{"row":154,"column":23}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":154,"column":2},"end":{"row":154,"column":23}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":159,"column":2},"end":{"row":159,"column":23}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":159,"column":2},"end":{"row":159,"column":23}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":161,"column":9},"end":{"row":161,"column":30}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":161,"column":9},"end":{"row":161,"column":30}},"text":"automataGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":13},"end":{"row":18,"column":14}},"text":"L"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":14},"end":{"row":18,"column":15}},"text":"R"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":165,"column":25},"end":{"row":165,"column":46}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":165,"column":25},"end":{"row":165,"column":48}},"text":"AutomataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":165,"column":2},"end":{"row":165,"column":23}},"text":"AutomataGeneratorBase"},{"action":"insertText","range":{"start":{"row":165,"column":2},"end":{"row":165,"column":25}},"text":"AutomataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":159,"column":2},"end":{"row":159,"column":23}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":159,"column":2},"end":{"row":159,"column":25}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":161,"column":9},"end":{"row":161,"column":30}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":161,"column":9},"end":{"row":161,"column":32}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":27}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":26,"column":6},"end":{"row":26,"column":29}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":41,"column":2},"end":{"row":41,"column":23}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":41,"column":2},"end":{"row":41,"column":25}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":67,"column":2},"end":{"row":67,"column":23}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":67,"column":2},"end":{"row":67,"column":25}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":85,"column":2},"end":{"row":85,"column":23}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":85,"column":2},"end":{"row":85,"column":25}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":106,"column":2},"end":{"row":106,"column":23}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":106,"column":2},"end":{"row":106,"column":25}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":154,"column":2},"end":{"row":154,"column":23}},"text":"automataGeneratorBase"},{"action":"insertText","range":{"start":{"row":154,"column":2},"end":{"row":154,"column":25}},"text":"automataLRGeneratorBase"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":154,"column":74},"end":{"row":155,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":155,"column":0},"end":{"row":155,"column":2}},"text":"\t\t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":155,"column":3},"end":{"row":156,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"lines":["\t\t    "]},{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":157,"column":2}},"text":"\t\t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":6},"end":{"row":156,"column":58}},"text":"k.utils.obj.each(automata.states, function (state) {"},{"action":"insertText","range":{"start":{"row":156,"column":58},"end":{"row":157,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":157,"column":0},"end":{"row":164,"column":0}},"lines":["\t\t\t\ttable[state.getIdentity()] = {};","\t\t\t\t","\t\t\t\tk.utils.obj.each(state.transitions, function (transition) {","\t\t\t\t\ttable[state.getIdentity()][transition.symbol.toString()] = transition.state;","\t\t\t\t});","\t\t\t});","\t\t\t"]},{"action":"insertText","range":{"start":{"row":164,"column":0},"end":{"row":164,"column":16}},"text":"\t\t\treturn table;"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":155,"column":3},"end":{"row":156,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":156,"column":0},"end":{"row":156,"column":6}},"text":"\t\t    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":6},"end":{"row":156,"column":7}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":7},"end":{"row":156,"column":8}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":8},"end":{"row":156,"column":9}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":9},"end":{"row":156,"column":10}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":10},"end":{"row":156,"column":11}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":11},"end":{"row":156,"column":12}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":12},"end":{"row":156,"column":13}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":13},"end":{"row":156,"column":14}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":14},"end":{"row":156,"column":15}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":14},"end":{"row":156,"column":15}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":13},"end":{"row":156,"column":14}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":13},"end":{"row":156,"column":14}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":14},"end":{"row":156,"column":15}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":15},"end":{"row":156,"column":16}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":16},"end":{"row":156,"column":17}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":17},"end":{"row":156,"column":18}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":18},"end":{"row":156,"column":20}},"text":"[]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":19},"end":{"row":156,"column":20}},"text":"]"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":18},"end":{"row":156,"column":19}},"text":"["}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":18},"end":{"row":156,"column":19}},"text":"{"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":19},"end":{"row":156,"column":20}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":20},"end":{"row":156,"column":21}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":21},"end":{"row":157,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":157,"column":6}},"text":"\t\t    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":56},"end":{"row":158,"column":57}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":56},"end":{"row":159,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":159,"column":0},"end":{"row":159,"column":6}},"text":"\t\t    "}]}]]},"ace":{"folds":[{"start":{"row":107,"column":3},"end":{"row":148,"column":2},"placeholder":"..."}],"scrolltop":1088,"scrollleft":0,"selection":{"start":{"row":101,"column":4},"end":{"row":101,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":76,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1408816868760,"hash":"520f27c5551dfc0dd6e41622be484b87be40c2d1"}